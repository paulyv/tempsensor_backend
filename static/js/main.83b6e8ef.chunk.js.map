{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","getCurrentSensorData","fetch","then","response","json","data","setState","humidity","temperature","catch","err","console","error","toString","getHistoryData","chart_temperatures","temperatures","chart_humidities","humidities","state","delay","chart_delay","this","interval","setInterval","ratio","sliced_temps","sliced_humids","length","slice","Math","max","ceil","temperature_data","reverse","map","i","x","moment","Date","format","y","filter","item","index","humidity_data","Navbar","bg","variant","Brand","className","Container","fluid","style","marginLeft","marginTop","Row","Col","md","maxWidth","xType","height","width","title","color","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.83b6e8ef.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport '../node_modules/react-vis/dist/style.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport moment from 'moment';\nimport { XYPlot, XAxis, YAxis, LineSeries } from 'react-vis';\nimport Container from 'react-bootstrap/Container';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      humidity: null,\n      temperature: null,\n      chart_temperatures: [],\n      chart_humidities: [],\n      delay: 10090,\n      chart_delay: 60000\n    };\n  };\n\n  componentDidMount() {\n    this.getCurrentSensorData()\n    this.getHistoryData()\n    this.interval = setInterval(this.getCurrentSensorData, this.state.delay);\n    this.interval = setInterval(this.getHistoryData, this.state.chart_delay);\n  }\n\n  getCurrentSensorData = () => {\n    fetch('http://tempsensor.local:3000/api/sensors/house/current_data')\n      .then(response => response.json())\n      .then(data => {\n        this.setState({ humidity: data.humidity });\n        this.setState({ temperature: data.temperature });\n      })\n      .catch(err => console.error(err.toString()))\n  }\n\n  getHistoryData = () => {\n    fetch('http://tempsensor.local:3000/api/sensors/house/history_data')\n      .then(response => response.json())\n      .then(data => {\n        this.setState({ chart_temperatures: data.temperatures });\n        this.setState({ chart_humidities: data.humidities });\n      })\n      .catch(err => console.error(err.toString()))\n  }\n\n  render() {\n    let ratio = 1;\n    let number_of_ticks_to_show = 15\n    let sliced_temps = this.state.chart_temperatures;\n    let sliced_humids = this.state.chart_humidities;\n\n    // If there's over 12h worth of data let's select only the newest 12h. (2min x 360) \n    if (sliced_temps.length >= 360) {\n      sliced_temps = sliced_temps.slice(Math.max(sliced_temps.length - 360, 0))\n    }\n    // If there's more data points than we want to show let's calculate a ratio for filtering\n    if (sliced_temps.length > number_of_ticks_to_show) {\n      ratio = Math.ceil(sliced_temps.length / number_of_ticks_to_show);\n    }\n    // We want to reverse to get the newest ones, not the earliest ones\n    let reversed_temps = sliced_temps.reverse();\n    \n    // Finally let's create a new data array with the previous configurations\n    let reversed_temperature_data = reversed_temps.map(i => {\n      return { x: moment(new Date(i.x)).format(\"HH:mm\"), y: i.y };\n    }).filter((item, index) => {\n      return index % ratio === 0;\n    })\n    // Lets reverse the list back right way\n    // let temperature_data = reversed_temperature_data.reverse();\n    let temperature_data = reversed_temperature_data;\n\n    // Let's do the same with humidity data\n    if (this.state.chart_humidities.length > 360) {\n      sliced_humids = this.state.chart_humidities.slice(Math.max(this.state.chart_humidities.length - 360, 0))\n    }\n    let reversed_humids = sliced_humids.reverse();\n\n    let reversed_humidity_data = reversed_humids.map(i => {\n      return { x: moment(new Date(i.x)).format(\"HH:mm\"), y: i.y };\n    }).filter((item, index) => {\n      return index % ratio === 0;\n    })\n\n    let humidity_data = reversed_humidity_data.reverse();\n\n    return (\n      <>\n        <Navbar bg=\"dark\" variant=\"dark\">\n          <Navbar.Brand><div className=\"title-font\"></div></Navbar.Brand>\n        </Navbar>\n\n        <Container fluid style={{ marginLeft: '10px', marginTop: '20px' }}>\n          <div className=\"title-area\">\n            <h1>Asunnon sisäilma</h1>\n          </div>\n          <Row>\n            <Col md={7} style={{ maxWidth: \"90%\" }}>\n              <XYPlot xType=\"ordinal\" height={200} width={750}>\n                <XAxis title=\"\" />\n                <YAxis title=\"Celsius\" />\n                <LineSeries data={temperature_data} color=\"#FFCCCB\" />\n              </XYPlot>\n            </Col>\n            <Col md={4}>\n              <div className=\"temperature-area\">\n                <h3>Lämpötila</h3>\n                <h3>{this.state.temperature}&deg;C</h3>\n              </div>\n            </Col>\n          </Row>\n          <Row>\n            <Col md={7} style={{ maxWidth: \"90%\" }}>\n              <XYPlot xType=\"ordinal\" height={200} width={750}>\n                <XAxis title=\"\" />\n                <YAxis title=\"Kosteus %\" />\n                <LineSeries data={humidity_data} color=\"#ADD8E6\" />\n              </XYPlot>\n            </Col>\n            <Col md={4}>\n              <div className=\"humidity-area\">\n                <h3>Ilmankosteus</h3>\n                <h3>{this.state.humidity}%</h3>\n              </div>\n            </Col>\n          </Row>\n        </Container>\n      </>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}